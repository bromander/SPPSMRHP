import os
import asyncio
import logging
import sys
import random

from pyexpat.errors import messages
from yandex_music import ClientAsync
import time
from aiogram import Bot, Dispatcher, types, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, TelegramObject
from aiogram.fsm.state import State, StatesGroup
from skripts import additionals
from skripts.additionals import Work_with_json as wwjson, Yandex_music_parse as Yparse
from aiogram.fsm.context import FSMContext
from git import Repo
import tempfile, shutil

PENDING_REQUESTS = {}
TOKEN = "7559789537:AAHvjxbEEmQ46w4ACdDoeJ2tQSlp3lZsolk"
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

admins_ids = [5389197909, 6113046557]


def block_filter():
    async def _filter(message: Message) -> bool:
        try:
            userdata = wwjson.get_json_data("jsons/Human_souls.json")[str(message.from_user.id)]
        except KeyError:
            return True

        if userdata["class"] == 0:
            await message.answer("–û—à–∏–±–∫–∞, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç!\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –°–í–û–π –ø—Ä–æ—Ñ–∏–ª—å!")
            return False


        if userdata["soul_name"] != "br0mand":
            return userdata["blocked"] == False
        else:
            return True

    return _filter



@dp.message(Command("bot_info"))
async def send_info(message: Message):
    def count_commits_gitpython(repo_path: str) -> int:
        repo = Repo(repo_path)
        commits = list(repo.iter_commits('master'))
        last_commit = repo.head.commit
        return len(commits), last_commit

    vers, last_comit_data = count_commits_gitpython(r"C:\Users\roma\PycharmProjects\SPPSMRHP")

    start_time = time.perf_counter()
    message_before_ping = await message.answer(f'–ê–ª—å—Ñ—Ä–µ–¥–æ 19 \n'
                         f'–í–µ—Ä—Å–∏—è: V1.{vers}\n'
                         f'---------------------\n'
                         f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_comit_data.committed_datetime}\n‚Ä¢ {last_comit_data.message.strip()}\n\n'
                         f"–ü–∏–Ω–≥: –ó–∞–≥—Ä—É–∑–∫–∞...")
    end_time = time.perf_counter()
    latency = (end_time - start_time) * 1000

    await message_before_ping.edit_text(f'–ê–ª—å—Ñ—Ä–µ–¥–æ 19 \n'
                         f'–í–µ—Ä—Å–∏—è: V1.{vers}\n'
                         f'---------------------\n'
                         f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_comit_data.committed_datetime}\n‚Ä¢ {last_comit_data.message.strip()}\n\n'
                         f"–ü–∏–Ω–≥: {latency:.2f} –º—Å")



#–ö–æ–º–º–∞–Ω–¥–∞ Start
@dp.message(Command("start"))
async def start_command(message: Message):
    human_souls_data = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    if str(message.from_user.id) not in list(human_souls_data.keys()):

        logging.info(f"New user! (@{message.from_user.username})")

        human_souls_data[str(message.from_user.id)] = {
            "soul_name" : message.from_user.username,
            "blocked" : False,
            "suggested_music" : {},
            "class" : 0,
            "last_mus" : 0
        }
        wwjson.send_json_data(human_souls_data, "jsons/Human_souls.json")

    if human_souls_data[str(message.from_user.id)]["class"] == 0:
        buttons = [
            [
                types.InlineKeyboardButton(text="5", callback_data="set_class_5"),
                types.InlineKeyboardButton(text="6", callback_data="set_class_6"),
                types.InlineKeyboardButton(text="7", callback_data="set_class_7"),
                types.InlineKeyboardButton(text="8", callback_data="set_class_8"),
                types.InlineKeyboardButton(text="9", callback_data="set_class_9"),
                types.InlineKeyboardButton(text="10", callback_data="set_class_10"),
                types.InlineKeyboardButton(text="11", callback_data="set_class_11")
            ]
        ]

        keyboard_pon = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–¥–∏–Ω–æ–∂–¥—ã):", reply_markup=keyboard_pon)


@dp.callback_query(lambda c: c.data.startswith("set_class_"))
async def set_class_(callback_query: types.CallbackQuery):

    class_pon = str(callback_query.data).split("_")[2]
    human_souls_data = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    human_souls_data[str(callback_query.from_user.id)]["class"] = int(class_pon)

    wwjson.send_json_data(human_souls_data, "jsons/Human_souls.json")

    await callback_query.answer()
    await callback_query.message.answer("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/music - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É\n/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ\n/top - —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤\n/bot_info - —Ç–µ—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")


class Waiting(StatesGroup):
    waiting_for_music = State()


@dp.message(block_filter(), Command("music"))
async def music(message: Message, state: FSMContext):
    userdata = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    if time.time() - int(userdata[str(message.from_user.id)]["last_mus"]) > 30:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–∞/—Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Waiting.waiting_for_music)
        userdata[str(message.from_user.id)]["last_mus"] = int(time.time())
        wwjson.send_json_data(userdata, "jsons/Human_souls.json")

    else:
        await message.answer(f"–í—ã –¥–µ–ª–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {30 - int(time.time() - int(userdata[str(message.from_user.id)]["last_mus"]))} —Å–µ–∫")

@dp.message(Waiting.waiting_for_music)
async def waiting_for_music(message: Message, state: FSMContext):
    states_pon = []
    musics = message.text.split(",")

    query = '\n'.join(states_pon)
    message_query = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞...\n<blockquote expandable>{query}</blockquote>")

    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    for i in musics:
        track_swearing = await yparse.check_text_for_swearing(str(i))
        if track_swearing == False:
            try:
                track = await yparse.parse(i)

            except AttributeError:
                states_pon.append(f"‚õî –¢—Ä–µ–∫ \"{i}\" –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!\n")

            else:

                track_swearing = await yparse.check_text_for_swearing(str(i))
                if track_swearing == False:
                    track_swearing = await yparse.check_mus_for_swearing(track)
                    artists = ', '.join([i['name'] for i in track['artists']][:3])

                    if track_swearing == "NotFoundError":

                        track_form = wwjson().already_have_that_track(f"{track['title']}-({artists})")

                        if track_form == "TrackNotFoundError":
                            states_pon.append(f"‚ùî –¢–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–∞–∫ \"{track['title']}-({artists})\") –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!\n")
                            additionals.suggest_music(None, message.from_user.id, f"{track['title']}-({artists})")
                            await send_request_to_admins(message.from_user.username, track, message.from_user.id, i)

                        elif track_form == False:
                            states_pon.append(f"‚ùå –í —Ç—Ä–µ–∫–µ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–∞–∫ \"{track['title']}-({artists})\") –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")
                            additionals.suggest_music(False, message.from_user.id, f"{track['title']}-({artists})")

                        elif track_form == True:
                            states_pon.append(f"‚úÖ –¢—Ä–µ–∫ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–∞–∫ \"{track['title']}-({artists})\") –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ–π –º—É–∑—ã–∫–∏!\n")
                            additionals.suggest_music(True, message.from_user.id, f"{track['title']}-({artists})")


                    elif track_swearing:
                        states_pon.append(f"‚ùå –í —Ç—Ä–µ–∫–µ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–∞–∫ \"{track['title']}-({artists})\") –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")
                        additionals.suggest_music(False, message.from_user.id, f"{track['title']}-({artists})")
                    else:
                        states_pon.append(f"‚úÖ –¢—Ä–µ–∫ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–∞–∫ \"{track['title']}-({artists})\") –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ–π –º—É–∑—ã–∫–∏!\n")
                        additionals.suggest_music(True, message.from_user.id, f"{track['title']}-({artists})")


                else:
                    states_pon.append(f"‚ùå –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ \"{i}\" –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")
                    additionals.suggest_music(False, message.from_user.id, f"{track['title']}-({artists})")

        else:
            states_pon.append(f"‚ùå –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ \"{i}\" –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")

        query = '\n'.join(states_pon)
        await message_query.edit_text(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–∫–æ–≤...\n<blockquote expandable>{query}</blockquote>")

    await message_query.edit_text(f"–¢—Ä–µ–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n<blockquote expandable>{query}</blockquote>"
                                  f"\nüîπ–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —Ç—Ä–µ–∫ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤."
                                  f"\nüîπ–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ /profile"
                                  f"\nüîπ–ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤–æ–æ–±—â–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞")

    await state.clear()


async def send_request_to_admins(soul_name, track, soul_id, soul_request):
    global PENDING_REQUESTS

    artists = ', '.join([i['name'] for i in track['artists']][:2])
    PENDING_REQUESTS[len(PENDING_REQUESTS)] = f"{track['title']}-({artists})"

    buttons = [
        [
            types.InlineKeyboardButton(text="‚úÖ", callback_data=f"track_{len(PENDING_REQUESTS)}_allow"),
            types.InlineKeyboardButton(text="‚ùå", callback_data=f"track_{len(PENDING_REQUESTS)}_forbid")
        ],
        [
            types.InlineKeyboardButton(text=f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å @{soul_name}", callback_data=f"block_user_{soul_id}")
        ]
    ]
    keyboard_pon = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    for i in admins_ids:
        await bot.send_message(i, f"–î—É—à–∞ @{soul_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç—Ä–µ–∫ \"{track['title']}-({artists})\"\n(–ø–æ –∑–∞–ø—Ä–æ—Å—É: {soul_request})", reply_markup=keyboard_pon)


@dp.callback_query(lambda c: c.data.startswith("track_"))
async def track_allow(callback_query: types.CallbackQuery):
    track_title = callback_query.data.split("_")[1]
    action = callback_query.data.split("_")[2]

    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    print(PENDING_REQUESTS)

    if action == "allow":
        human_souls[str(callback_query.from_user.id)]["suggested_music"][PENDING_REQUESTS[int(track_title)-1]] = True
        await callback_query.message.answer(f"‚úÖ –¢—Ä–µ–∫ {PENDING_REQUESTS[int(track_title)-1]} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!")
    elif action == "forbid":
        await callback_query.message.answer(f"‚úÖ –¢—Ä–µ–∫ {PENDING_REQUESTS[int(track_title)-1]} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!")
        human_souls[str(callback_query.from_user.id)]["suggested_music"][PENDING_REQUESTS[int(track_title)-1]] = False

    wwjson.send_json_data(human_souls, "jsons/Human_souls.json")


    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("block_user_"))
async def block_user(callback_query: types.CallbackQuery):

    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    human_souls[str(callback_query.from_user.id)]["blocked"] = True
    wwjson.send_json_data(human_souls, "jsons/Human_souls.json")
    await callback_query.message.answer("‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    await callback_query.answer()


@dp.message(block_filter(), Command("profile"))
async def profile(message: Message):
    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    all_user_tracks = []
    for i in human_souls[str(message.from_user.id)]["suggested_music"].keys():
        if human_souls[str(message.from_user.id)]["suggested_music"][i] == False:
            icon = "‚ùå"
        elif human_souls[str(message.from_user.id)]["suggested_music"][i] == True:
            icon = "‚úÖ"
        elif human_souls[str(message.from_user.id)]["suggested_music"][i] == None:
            icon = "‚ùî"
        all_user_tracks.append(f"{i}   -   {icon}")

    all_user_tracks = "\n\n".join(all_user_tracks)

    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å @{message.from_user.username}"
        f"\n–ö–ª–∞—Å—Å: {human_souls[str(message.from_user.id)]["class"]}"
        f"\n–ö–æ–ª-–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {len(list(human_souls[str(message.from_user.id)]["suggested_music"].keys()))}"
        f"<blockquote expandable>{all_user_tracks}</blockquote>"
    )

@dp.message(block_filter(), Command("top"))
async def top(message: Message):
    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = (
        wwjson().know_top50_music(human_souls[str(message.from_user.id)]["class"])
    )

    TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = \
        [f"{f"{"-".join(i.split("-")[:-1])} / <i>{"-".join(i.split("-")[-1:]).replace(")", "").replace("(", "")}</i>"} : {TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon[i]}"
         for i in TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon]

    TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = ''.join(
        (f"üî¥ {el}" if i == 0 else
         f"\n üü† {el}" if i == 1 else
         f"\n  üü° {el}" if i == 2 else
         f"\n  üîµ {el}")
        for i, el in enumerate(
            TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon)
    )

    await message.answer(
        f"üëë –¢–æ–ø 20 —Ç—Ä–µ–∫–æ–≤ {human_souls[str(message.from_user.id)]["class"]} –∫–ª–∞—Å—Å–æ–≤:"
        f"\n\n{TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon}"
    )


#—Ö–∑ —á–æ —ç—Ç–æ, –∫–∞–∫–∞—è—Ç–∞ main –∑–∞–ª—É–ø–∞ —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
async def main():
    global yparse

    client = await ClientAsync(token="y0__xD7ganyBRje-AYgicPntBL0uWtUHnAsJBHTkC-I29OiaSJPeg").init()

    yparse = Yparse(client)

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


#–∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())