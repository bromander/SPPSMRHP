import asyncio
import logging
import traceback
import sys
import os
from typing import Optional, Union
import aiogram.exceptions
import yandex_music.exceptions
from yandex_music import ClientAsync
import time
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from skripts import additionals
from skripts.additionals import Work_with_json as wwjson, Yandex_music_parse as Yparse
from aiogram.fsm.context import FSMContext
from git import Repo
import functools
import coloredlogs

PENDING_REQUESTS = {}
MESSAGE_IDS_ANM_REQUESTS = {}
TOKEN = "7559789537:AAErm3K59YugEmqMy_yY27JaPpZr08aetRE"
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

admins_ids = [
    5389197909
]


def block_filter() -> any:
    '''
    —Ö–µ–Ω–¥–ª–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    '''
    async def _filter(message: Message) -> bool:
        try:
            userdata = wwjson.get_json_data("jsons/Human_souls.json")[str(message.from_user.id)]
        except KeyError:
            return True

        if userdata["class"] == 0:
            await message.answer("–û—à–∏–±–∫–∞, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç!\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!")
            return False


        if userdata["soul_name"] != "br0mand":
            return not userdata["blocked"]
        else:
            return True

    return _filter


def catch_errors(func) -> any:
    '''
    –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤ –∫–æ–¥–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º
    '''
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:

            tb = sys.exc_info()[2]
            last_trace = traceback.extract_tb(tb)[-1]

            if str(type(e).__name__) == "KeyError":
                await start_command(args[0])
                return None

            logging.error(f'{type(e).__name__} on line {last_trace.lineno}: {e}')

            code = f'''
            {type(e).__name__} on line {last_trace.lineno}: {e}
            '''
            escaped = code.replace("_", "\\_").replace("*", "\\*") \
                .replace("[", "\\[").replace("`", "\\`")

            text = f"```python\n{escaped}```"
            await args[0].answer((f"‚ùó –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                                  f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—ë –∏–Ω—Ç–µ—Ä–Ω–µ—Ç‚Äë—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
                                  f"–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: @br0mand\n\n"
                                  f"‚öôÔ∏è –ö–æ–¥ –æ—à–∏–±–∫–∏:"))
            await args[0].answer(text, parse_mode="MarkdownV2")


    return wrapper

@dp.message(Command("get_all_users"))
async def get_all_users(message: Message) -> None:
    if int(message.from_user.id) in admins_ids:
        usersdata = wwjson.get_json_data("jsons/Human_souls.json")
        usersdata = dict(sorted(usersdata.items(), key=lambda item: item[1]["class"]))

        users_stat = []

        for i in usersdata:
            userdata = usersdata[i]

            if int(userdata["last_mus"]) == 0:
                user_last_activity = '–ù–ò–ö–û–ì–î–ê'
            else:
                user_last_activity = time.ctime(int(userdata["last_mus"]))

            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{userdata["soul_name"]}'
                                 f'\nID: <i>{i}</i>'
                                 f'\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: <i>{userdata["blocked"]}</i>'
                                 f'\n–ö–æ–ª-–≤–æ  –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: <i>{len(userdata["suggested_music"])}</i>'
                                 f'\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <i>{user_last_activity}</i>'
                                 f'\n–ö–ª–∞—Å—Å: <i>{userdata["class"]}</i>')
    else:
        await message.answer("–¢—ã –∫–∞–∫ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —É–∑–Ω–∞–ª?\n–°–æ—Ä–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ")


@dp.message(Command("set_recruiting"))
async def set_recruiting(message: Message) -> None:
    if int(message.from_user.id) in admins_ids:
        data = wwjson.get_json_data('./jsons/data.json')
        if data["recruiting"]:
            data["recruiting"] = False
            for i in admins_ids:
                await bot.send_message(chat_id=i, text="üîí –ù–∞–±–æ—Ä —Ç—Ä–µ–∫–æ–≤ –±—ã–ª –∑–∞–∫—Ä—ã—Ç!")
                logging.info(f"üîí –ù–∞–±–æ—Ä —Ç—Ä–µ–∫–æ–≤ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}!")
        else:
            data["recruiting"] = True
            for i in admins_ids:
                await bot.send_message(chat_id=i, text="üîì –ù–∞–±–æ—Ä —Ç—Ä–µ–∫–æ–≤ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç!")
                logging.info(f"üîì –ù–∞–±–æ—Ä —Ç—Ä–µ–∫–æ–≤ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}!")
        wwjson.send_json_data(data, './jsons/data.json')
    else:
        await message.answer("–¢—ã –∫–∞–∫ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —É–∑–Ω–∞–ª?\n–°–æ—Ä–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ")





@dp.message(Command("bot_info"))
@catch_errors
async def send_info(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–æ—Ç–∞
    –ö–æ–º–∞–Ω–¥–∞: /bot_info
    """
    def count_commits_gitpython(repo_path: str) -> tuple:
        repo = Repo(repo_path)
        commits = list(repo.iter_commits('master'))
        last_commit = repo.head.commit
        return len(commits), last_commit

    vers, last_comit_data = count_commits_gitpython(r"../../")

    start_time = time.perf_counter()
    commit_data = '\n‚Ä¢ '.join(str(last_comit_data.message.strip()).split(". "))
    message_before_ping = await message.answer(f'–ê–ª—å—Ñ—Ä–µ–¥–æ 19 \n'
                         f'–í–µ—Ä—Å–∏—è: V1.{vers}\n'
                         f'---------------------\n'
                         f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_comit_data.committed_datetime}\n‚Ä¢ {commit_data}\n\n'
                         f"–ü–∏–Ω–≥: –ó–∞–≥—Ä—É–∑–∫–∞...")
    end_time = time.perf_counter()
    latency = (end_time - start_time) * 1000

    await message_before_ping.edit_text(f'–ê–ª—å—Ñ—Ä–µ–¥–æ 19 \n'
                         f'–í–µ—Ä—Å–∏—è: V1.{vers}\n'
                         f'---------------------\n'
                         f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_comit_data.committed_datetime}\n‚Ä¢ {commit_data}\n\n'
                         f"–ü–∏–Ω–≥: {latency:.2f} –º—Å")



#–ö–æ–º–º–∞–Ω–¥–∞ Start
@dp.message(Command("start"))
async def start_command(message: Message) -> None:
    '''
    –ö–æ–º–∞–Ω–¥–∞, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    '''
    human_souls_data = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    if str(message.from_user.id) not in list(human_souls_data.keys()):


        human_souls_data[str(message.from_user.id)] = {
            "soul_name" : message.from_user.username,
            "blocked" : False,
            "suggested_music" : {},
            "class" : 0,
            "last_mus" : 0
        }
        wwjson.send_json_data(human_souls_data, "jsons/Human_souls.json")

    if human_souls_data[str(message.from_user.id)]["class"] == 0:
        buttons = [
            [
                types.InlineKeyboardButton(text="5", callback_data="set_class_5"),
                types.InlineKeyboardButton(text="6", callback_data="set_class_6"),
                types.InlineKeyboardButton(text="7", callback_data="set_class_7"),
                types.InlineKeyboardButton(text="8", callback_data="set_class_8"),
                types.InlineKeyboardButton(text="9", callback_data="set_class_9"),
                types.InlineKeyboardButton(text="10", callback_data="set_class_10"),
                types.InlineKeyboardButton(text="11", callback_data="set_class_11")
            ]
        ]

        keyboard_pon = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–¥–∏–Ω–æ–∂–¥—ã):", reply_markup=keyboard_pon)
    else:
        if int(message.from_user.id) in admins_ids:
            await message.answer(
                "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/music - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É\n/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ\n/top - —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤\n/bot_info - —Ç–µ—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n\n"
                "(–û–≥–æ, —Ç—ã –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!)\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:\n\n/set_recruiting - –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä\n"
                "/get_all_users - –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Å—É")
        else:
            await message.answer("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/music - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É\n/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ\n/top - —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤\n/bot_info - —Ç–µ—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")


@dp.callback_query(lambda c: c.data.startswith("set_class_"))
async def set_class_(callback_query: types.CallbackQuery) -> None:
    '''
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    '''

    class_pon = str(callback_query.data).split("_")[2]
    human_souls_data = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    human_souls_data[str(callback_query.from_user.id)]["class"] = int(class_pon)

    wwjson.send_json_data(human_souls_data, "jsons/Human_souls.json")

    if int(callback_query.from_user.id) in admins_ids:
        await callback_query.message.answer(
            "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/music - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É\n/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ\n/top - —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤\n/bot_info - —Ç–µ—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n\n"
            "(–û–≥–æ, —Ç—ã –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!)\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:\n\n/set_recruiting - –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä\n"
            "/get_all_users - –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∞—Å—Å—É")
    else:
        await callback_query.message.answer(
            "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n/music - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º—É–∑—ã–∫—É\n/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ\n/top - —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤\n/bot_info - —Ç–µ—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")


    await callback_query.answer()
    logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –∏–∑ {class_pon} –∫–ª–∞—Å—Å–∞!")

class Waiting(StatesGroup):
    waiting_for_music = State()


@dp.message(block_filter(), Command("music"))
@catch_errors
async def music(message: Message, state: FSMContext) -> None:
    '''
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—É–∑—ã–∫—É
    –ö–æ–º–∞–Ω–¥–∞: /music
    '''
    data = wwjson.get_json_data('./jsons/data.json')

    if not data["recruiting"]:
        await message.answer('‚ùó –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–æ—Ä –º—É–∑—ã–∫–∏ –∑–∞–∫—Ä—ã—Ç!')
        return None

    userdata = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    if time.time() - int(userdata[str(message.from_user.id)]["last_mus"]) > 30:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–∞/—Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Waiting.waiting_for_music)
        userdata[str(message.from_user.id)]["last_mus"] = int(time.time())
        wwjson.send_json_data(userdata, "jsons/Human_souls.json")


    else:
        sec = int(userdata[str(message.from_user.id)]["last_mus"])
        await message.answer(f"–í—ã –¥–µ–ª–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {30 - (int(time.time()) - int(sec))} —Å–µ–∫")


@dp.message(Waiting.waiting_for_music)
@catch_errors
async def waiting_for_music(message: Message, state: FSMContext) -> None:
    '''
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º—É–∑—ã–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ–ø—Ä–∏–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —á—Ç–æ–±—ã —Ç–µ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–∏–ª–∏/–æ—Ç–∫–ª–æ–Ω–∏–ª–∏
    '''
    states_pon = []
    musics = message.text.split(",")
    if len(musics) >= 50:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞, –≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º—É–∑—ã–∫–∏!\n({len(musics)}/50)")
        return None

    query = '\n'.join(states_pon)
    message_query = await message.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞...\n<blockquote expandable>{query}</blockquote>")

    for i in musics:
        track_swearing = await yparse.check_text_for_swearing(str(i))
        i = str(i).replace("\n", '')
        if not track_swearing:
            try:
                track = await yparse.parse(i)

            except AttributeError:
                logging.info(f'‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫, –Ω–æ —Ç—Ä–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!')
                states_pon.append(f"‚õî –¢—Ä–µ–∫ \"{i}\" –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!\n")

            else:

                track_swearing = await yparse.check_text_for_swearing(str(i))
                if not track_swearing:
                    track_swearing = await yparse.check_mus_for_swearing(track)
                    artists = ', '.join([i['name'] for i in track['artists']])

                    visual_name = f'{track['title']}-{artists}'

                    if track_swearing == "NotFoundError":

                        track_form = wwjson().already_have_that_track(str(track['id']))

                        if track_form == "TrackNotFoundError":
                            logging.info(f'‚ùî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫, –Ω–æ –µ–≥–æ —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!')
                            states_pon.append(f"‚ùî –¢–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–∞–∫ \"{visual_name}\") –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!\n")
                            additionals.suggest_music(None, message.from_user.id, f"{track['id']}", visual_name)
                            asyncio.create_task(send_request_to_admins(message.from_user.username, track, message.from_user.id, i))

                        elif not track_form:
                            logging.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫ —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π!')
                            states_pon.append(f"‚ùå –í —Ç—Ä–µ–∫–µ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–∞–∫ \"{visual_name}\") –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")
                            additionals.suggest_music(False, message.from_user.id, f"{track['id']}", visual_name)

                        elif track_form:
                            logging.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫ –∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!')
                            states_pon.append(f"‚úÖ –¢—Ä–µ–∫ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–∞–∫ \"{visual_name}\") –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ–π –º—É–∑—ã–∫–∏!\n")
                            additionals.suggest_music(True, message.from_user.id, f"{track['id']}", visual_name)


                    elif track_swearing:
                        logging.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫ —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π!')
                        states_pon.append(f"‚ùå –í —Ç—Ä–µ–∫–µ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–∞–∫ \"{visual_name}\") –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")
                        additionals.suggest_music(False, message.from_user.id, f"{track['id']}", visual_name)
                    else:
                        logging.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫ –∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!')
                        states_pon.append(f"‚úÖ –¢—Ä–µ–∫ \"{i}\" (–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–∞–∫ \"{visual_name}\") –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ–π –º—É–∑—ã–∫–∏!\n")
                        additionals.suggest_music(True, message.from_user.id, f"{track['id']}", visual_name)


                else:
                    logging.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" —Ç—Ä–µ–∫ —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π!')
                    states_pon.append(f"‚ùå –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ \"{i}\" –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")

        else:
            logging.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª \"{i}\" –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π!')
            states_pon.append(f"‚ùå –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ \"{i}\" –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!\n")

        query = '\n'.join(states_pon)
        await message_query.edit_text(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–∫–æ–≤...\n<blockquote expandable>{query}</blockquote>")

    await message_query.edit_text(f"–¢—Ä–µ–∫–∏ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n<blockquote expandable>{query}</blockquote>"
                                  f"\nüîπ–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Ç—Ä–µ–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /profile"
                                  f"\nüîπ–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —Ç—Ä–µ–∫ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤."
                                  f"\nüîπ–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–∫–æ–≤ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /profile"
                                  f"\nüîπ–ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤–æ–æ–±—â–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Ä–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ.")
    userdata = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    userdata[str(message.from_user.id)]["last_mus"] = int(time.time())
    wwjson.send_json_data(userdata, "jsons/Human_souls.json")
    await state.clear()


async def send_request_to_admins(soul_name: str, track: yandex_music.track.track.Track, soul_id: int, soul_request: str) -> None:
    '''
    –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∑–∞–ø—Ä–æ—Å, —Ä–∞–∑—Ä–µ—à–∏—Ç—å/–∑–∞–ø—Ä–µ—Ç–∏—Ç—å —Ç—Ä–µ–∫ –∏–ª–∏ –≤–æ–æ–±—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param soul_name: –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param track: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç—Ä–µ–∫–∞
    :param soul_id: –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param soul_request: –¢–æ, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫
    '''
    soul_request = soul_request.replace("\n", '')

    artists = ', '.join([i['name'] for i in track['artists']][:3])

    track_pon = await yparse.parse(f"{track['title']}")


    await yparse.download_mus(track_pon)

    buttons = [
        [
            types.InlineKeyboardButton(text="‚úÖ", callback_data=f"track_{track['id']}_allow"),
            types.InlineKeyboardButton(text="‚ùå", callback_data=f"track_{track['id']}_forbid")
        ],
        [
            types.InlineKeyboardButton(text=f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å @{soul_name}", callback_data=f"block_user_{soul_id}")
        ]
    ]
    keyboard_pon = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    audio_file = FSInputFile(path=f'{track["id"]}.mp3')

    for e, i in enumerate(admins_ids):
        await bot.send_audio(i,
                audio=audio_file,
                caption=f"–î—É—à–∞ @{soul_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç—Ä–µ–∫ \"{track['title']}-({artists})\"\n(–ø–æ –∑–∞–ø—Ä–æ—Å—É: {soul_request})",
                reply_markup=keyboard_pon)


    os.remove(f'{track['id']}.mp3')


@dp.callback_query(lambda c: c.data.startswith("track_"))
async def track_allow(callback_query: types.CallbackQuery) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ/–∑–∞–ø—Ä–µ—Ç —Ç—Ä–µ–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    '''

    track_title = callback_query.data.split("_")[1]
    action = callback_query.data.split("_")[2]
    visual_name = wwjson().get_track_name(track_title)

    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    if human_souls[str(callback_query.from_user.id)]["suggested_music"][track_title] != None:
        await callback_query.message.answer('–î–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ —É–∂–µ –±—ã–ª –æ—Ü–µ–Ω—ë–Ω!')
        await callback_query.answer()
        return None

    if action == "allow":
        human_souls[str(callback_query.from_user.id)]["suggested_music"][track_title] = True
        for i in admins_ids:
            logging.info(f"‚úÖ –¢—Ä–µ–∫ {visual_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–æ–º @{callback_query.from_user.username}!")
            await bot.send_message(i, f"‚úÖ –¢—Ä–µ–∫ {visual_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–æ–º @{callback_query.from_user.username}!")

    elif action == "forbid":
        human_souls[str(callback_query.from_user.id)]["suggested_music"][track_title] = False
        for i in admins_ids:
            logging.info(f"‚ùå –¢—Ä–µ–∫ {visual_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º @{callback_query.from_user.username}!")
            await bot.send_message(i, f"‚ùå –¢—Ä–µ–∫ {visual_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º @{callback_query.from_user.username}!")

    wwjson.send_json_data(human_souls, "jsons/Human_souls.json")
    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith("block_user_"))
async def block_user(callback_query: types.CallbackQuery) -> None:
    '''
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    userid = callback_query.data.split("_")[2]
    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    for i in human_souls:
        if i == userid:
            username = human_souls[i]["soul_name"]
            break
    human_souls[str(userid)]["blocked"] = True
    wwjson.send_json_data(human_souls, "jsons/Human_souls.json")
    for i in admins_ids:
        logging.info(f"‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback_query.from_user.username}!")
        await bot.send_message(i, f"‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback_query.from_user.username}!")
    await callback_query.answer()


@dp.message(block_filter(), Command("profile"))
@catch_errors
async def profile(message: Message) -> None:
    '''
    –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ
    –ö–æ–º–∞–Ω–¥–∞: /profile
    '''
    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    all_user_tracks = []
    for e, i in enumerate(human_souls[str(message.from_user.id)]["suggested_music"].keys()):
        if human_souls[str(message.from_user.id)]["suggested_music"][i] == False:
            icon = "‚ùå"
        elif human_souls[str(message.from_user.id)]["suggested_music"][i] == True:
            icon = "‚úÖ"
        elif human_souls[str(message.from_user.id)]["suggested_music"][i] == None:
            icon = "‚ùî"
        i = wwjson().get_track_name(i)
        all_user_tracks.append(f"{e+1}. {i}   -   {icon}")

    all_user_tracks = "\n\n".join(all_user_tracks)

    user_class = human_souls[str(message.from_user.id)]["class"]
    tracks_len = len(list(human_souls[str(message.from_user.id)]["suggested_music"].keys()))

    buttons = [[types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫", callback_data="choose_delete_track")]]
    keyboard_pon = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å @{message.from_user.username}"
        f"\n–ö–ª–∞—Å—Å: {user_class}"
        f"\n–ö–æ–ª-–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {tracks_len}"
        f"\n\n<blockquote expandable>{all_user_tracks}</blockquote>"
        '\n‚ùå - —Ç—Ä–µ–∫ –±—ã–ª –∑–∞–ø—Ä–µ—â—ë–Ω, \n‚úÖ - —Ç—Ä–µ–∫ –±—ã–ª —Ä–∞–∑—Ä–µ—à—ë–Ω, \n‚ùî - —Ç—Ä–µ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
    , reply_markup=keyboard_pon)

class Delete_track(StatesGroup):
    waiting_name = State()

@dp.callback_query(lambda c: c.data == "choose_delete_track")
async def delete_track(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    '''
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —É–¥–∞–ª–∏—Ç—å
    '''
    builder = ReplyKeyboardBuilder()

    human_souls_data = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    user_tracks = human_souls_data[str(callback_query.from_user.id)]["suggested_music"]
    if user_tracks:
        for i in user_tracks:
            i = wwjson().get_track_name(i)
            builder.add(types.KeyboardButton(text=str(i)))
        builder.adjust(4)
        builder.row(KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å"))

        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:",
            reply_markup=builder.as_markup(resize_keyboard=True),
        )
    else:
        await callback_query.message.answer("‚ùó –í—ã –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞!")
        return None
    await callback_query.answer()
    await state.set_state(Delete_track.waiting_name)


@dp.message(Delete_track.waiting_name)
async def set_class_(message: Message, state: FSMContext) -> None:
    '''
    –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫
    '''
    track = wwjson().get_track_id(message.text)
    track_name = message.text
    if track == '–û—Ç–º–µ–Ω–∏—Ç—å':
        mess = await message.answer(f"–û—Ç–º–µ–Ω–∞...", reply_markup=aiogram.types.ReplyKeyboardRemove())
        await state.clear()
        await mess.delete()
        return None
    human_souls_data = dict(wwjson.get_json_data("jsons/Human_souls.json"))
    if track in human_souls_data[str(message.from_user.id)]["suggested_music"]:
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —É–¥–∞–ª–∏–ª —Ç–µ–∫ \"{track_name}\"!')
        del human_souls_data[str(message.from_user.id)]["suggested_music"][str(track)]
    else:
        await message.answer(f"‚ùó –¢—Ä–µ–∫ {track_name} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!", reply_markup=aiogram.types.ReplyKeyboardRemove())
        await state.clear()
        return None

    wwjson.send_json_data(human_souls_data, "jsons/Human_souls.json")

    await message.answer(f"‚úÖ –¢—Ä–µ–∫ {track_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", reply_markup=aiogram.types.ReplyKeyboardRemove())
    await state.clear()




@dp.message(block_filter(), Command("top"))
@catch_errors
async def top(message: Message) -> None:
    '''
    –í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤
    '''
    human_souls = dict(wwjson.get_json_data("jsons/Human_souls.json"))

    TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = (
        wwjson().know_top20_music(human_souls[str(message.from_user.id)]["class"])
    )
    TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = \
        [
            f"{'-'.join(i.split('-')[:-1])} / <i>{'-'.join(i.split('-')[-1:]).replace(')', '').replace('(', '')}</i> : {TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon[i]}"
            for i in
            TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon
        ]

    TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = ''.join(
        (f"üî¥ {el}" if i == 0 else
        f"\n üü† {el}" if i == 1 else
        f"\n  üü° {el}" if i == 2 else
        f"\n  üîµ {el}")
        for i, el in enumerate(
            TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon)
    )
    if TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon == "":
        TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon = "–¢—Ä–µ–∫–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã!"

    top_tracks = human_souls[str(message.from_user.id)]["class"]
    await message.answer(
        f"üëë –¢–æ–ø 20 —Ç—Ä–µ–∫–æ–≤ {top_tracks} –∫–ª–∞—Å—Å–æ–≤:"
        f"\n\n{TOP_20_SOUNDS_DONT_LOOSE_IT_OMG_OMG_OMG_WHAT_TO_HELL_OH_MY_GOT_IS_THAT_REALLY_7777_1488_pon_pon_pon_pon_pon}"
    )


#—Ö–∑ —á–æ —ç—Ç–æ, –∫–∞–∫–∞—è—Ç–∞ main –∑–∞–ª—É–ø–∞ —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
async def main() -> None:
    global yparse
    connect_stat = True

    while True:
        try:
            client = await ClientAsync(token="y0__xD7ganyBRje-AYgicPntBL0uWtUHnAsJBHTkC-I29OiaSJPeg").init()
            yparse = Yparse(client)

        except yandex_music.exceptions.TimedOutError:
            logging.warning("Connection timed out. Waiting for 60 seconds...")
            connect_stat = False
            await asyncio.sleep(60)

        except yandex_music.exceptions.NetworkError:
            logging.warning("Connection connection is missing. Waiting for 60 seconds...")
            connect_stat = False
            await asyncio.sleep(60)

        else:
            if not connect_stat:
                logging.warning("Connection is established!")
                connect_stat = True
                client = await ClientAsync(token="y0__xD7ganyBRje-AYgicPntBL0uWtUHnAsJBHTkC-I29OiaSJPeg").init()
                yparse = Yparse(client)
            break



    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


# –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    coloredlogs.DEFAULT_FIELD_STYLES = {'asctime': {'color': 'green'}, 'levelname': {'color': 'green'}, 'name': {'color': 'blue'}}
    coloredlogs.DEFAULT_LEVEL_STYLES = {'critical': {'bold': True, 'color': 'red'}, 'debug': {'color': 'white'}, 'error': {'color': 'red'}, 'info': {'color': 'white'}, 'notice': {'color': 'magenta'}, 'spam': {'color': 'green', 'faint': True}, 'success': {'bold': True, 'color': 'green'}, 'verbose': {'color': 'blue'}, 'warning': {'color': 'yellow'}}
    coloredlogs.install(level=logging.INFO, stream=sys.stdout, format='%(asctime)s : %(levelname)s : %(message)s')
    asyncio.run(main())